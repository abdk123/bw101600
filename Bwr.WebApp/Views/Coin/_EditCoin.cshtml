
@model BWR.Application.Dtos.Setting.Coin.CoinUpdateDto
@{
    Layout = null;
}

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title">تعديل عملة</h4>
        </div>
        @using (Ajax.BeginForm("Edit", "Coin", null, new AjaxOptions { HttpMethod = "Post" }, new { @class = "form-horizontal", role = "form" , id = "editCoinForm" }))
        {
            <div class="modal-body">

                <div class="col-lg-12 col-md-12">
                    <div class="form-horizontal">

                        @Html.HiddenFor(model => model.Id)
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            <label class="control-label col-md-2" for="Name">اسم العملة <span class="text-danger">*</span></label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", id = "e-name" } })

                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="Name">الكود <span class="text-danger">*</span></label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", id = "e-code" } })
                                @*<input type="text" id="e-name" name="Name" class="form-control" />*@
                                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="Name">ايزو كود <span class="text-danger"></span></label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ISOCode, new { htmlAttributes = new { @class = "form-control", id = "e-isoCode" } })
                                @*<input type="text" id="e-isoCode" name="ISOCode" class="form-control" />*@
                                @Html.ValidationMessageFor(model => model.ISOCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2" for="Name">فعالة </label>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    <label>
                                        @Html.EditorFor(model => model.IsEnabled, new { htmlAttributes = new { @class = "flat", id = "e-isEnabled" } })
                                    </label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="button" id="btnEditCoin" class="btn btn-primary">حفظ <span class="glyphicon glyphicon-save"></span></button>
                        <button type="button" class="btn btn-default" onclick="resetEditCoinContainer()" data-dismiss="modal">إغلاق <span class="glyphicon glyphicon-remove"></span></button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    
    $(function () {
        $('input.flat').iCheck({
            checkboxClass: 'icheckbox_flat-green',
            radioClass: 'iradio_flat-green'
        });
        //========
        
        var $form = $("#editCoinForm");
        $.validator.unobtrusive.parse($form);
        

        $('#btnEditCoin').on("click", function (event) {
            
            if ($form.valid()) {
                
                var dto = {
                    Id: '@Html.Raw(Model.Id)',
                    Name: $('#e-name').val(),
                    Code: $('#e-code').val(),
                    ISOCode: $('#e-isoCode').val(),
                    IsEnabled: getIsEnableValue
                };
                
                $.ajax({
                    url: '@Url.Action("Edit", "Coin")',
                    type: 'POST',
                    data: dto,
                    dataType: "json",
                    cache: false,
                    success: function (data) {

                        if (data.Success == true) {
                            
                            resetEditCoinContainer();   

                            $coinDataTable.refresh();
                            toastr.success('تم الحفظ بنجاح')
                        }
                        else {
                            if (data.Exist == true) {
                                $('[data-valmsg-for="Name"]').html("");
                                $('[data-valmsg-for="Name"]').html(data.Message);
                            }
                            toastr.error(data.Message);
                        }

                    },
                    error: function () { toastr.error("خدث خطأ ما أثناء الإضافة"); }
                });

            }

        });

    });

    function getIsEnableValue() {
        var divChecked = $('#e-isEnabled').parent();
        if (divChecked.hasClass('checked'))
            return true;
        else
            return false;
    }

    function resetEditCoinContainer() {

        $('#editCoinModal').modal('hide');
        $('#editCoinContainer').html('');
    }

</script>
