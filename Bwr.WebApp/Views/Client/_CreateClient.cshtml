
@model BWR.Application.Dtos.Client.ClientInsertDto
@{

    Layout = null;
}

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title">إضافة عميل</h4>
        </div>
        @using (Ajax.BeginForm("Create", "Client", null, new AjaxOptions { HttpMethod = "Post", OnSuccess = "createClientSuccess" }, new { @class = "form-horizontal", role = "form", id = "addClientForm" }))
        {
            <div class="modal-body ">
                <div class="col-lg-12 col-md-12">
                    <ul class="nav nav-tabs" id="myTab" role="tablist">
                        <li class="nav-item active">
                            
                            <a class="nav-link active" id="client-tab" data-toggle="tab" href="#addClientSection" role="tab">بيانات العميل</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="phones-tab" data-toggle="tab" href="#addPhoneSection" role="tab">الهواتف</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="cashFlow-tab" data-toggle="tab" href="#addClientCashFlow" role="tab">الرصيد</a>
                        </li>
                    </ul>
                </div>

                <div class="col-lg-12 col-md-12">
                    <div class="tab-content">
                        <div class="tab-pane active" id="addClientSection">
                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                <div class="form-group">
                                    <label class="control-label col-md-3" for="Name">اسم العميل <span class="text-danger">*</span></label>
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control", id = "a-client-fullName" } })

                                        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-3" for="CompanyCountries">اختر المنطقة<span class="text-danger">*</span></label>
                                    <div class="col-md-9">
                                        @Html.DropDownListFor(model => model.CountryId, new List<SelectListItem>(), new { @class = "form-control", id = "a-client-countryId" })
                                        <span class="text-danger field-validation-error" data-valmsg-for="CountryId" data-valmsg-replace="true"></span>
                                    </div>

                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-3" for="Name">العنوان التفصيلي <span class="text-danger">*</span></label>
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", id = "a-client-address" } })

                                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-3" for="Name">الحساب فعال </label>
                                    <div class="col-md-9">
                                        <div class="checkbox">
                                            <label>
                                                @Html.EditorFor(model => model.IsEnabled, new { htmlAttributes = new { @class = "flat", id = "a-client-isEnabled" } })
                                            </label>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="tab-pane" id="addPhoneSection">
                            <div class="row">
                                <div class="col-sm-4 col-sm-4"></div>

                                <div class="col-md-4 col-sm-4">
                                    <h4>إضافة ارقام الهواتف</h4>
                                </div>
                            </div>

                            <div style="margin-bottom:10px;"></div>

                            <div class="row">
                                <div class="col-md-8">
                                    <button type="button" class="btn btn-success" id="addPhoneTextBtn">إضافة حقل جديد <span class="fa fa-plus"></span></button>
                                </div>
                            </div>
                            <div style="margin-bottom:10px;"></div>
                            <div class="row">
                                <div class="col-md-3 col-sm-3"></div>
                                <div class="col-md-8 col-sm-8">
                                    <div class="row a-phone-group">



                                    </div>
                                </div>
                            </div>

                            <div style="margin-bottom:15px;"></div>
                        </div>

                        <div id="addClientCashFlow" class="tab-pane">
                            <div class="row a-coins">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">

                        <button id="btnAddClient" type="button" class="btn btn-primary">حفظ <span class="glyphicon glyphicon-save"></span></button>
                        <button type="button" class="btn btn-sm btn-default" onclick="resetAddClientContainer();" data-dismiss="modal">إغلاق <span class="glyphicon glyphicon-remove"></span></button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    var aTable;
    var oldData;
    $(function () {

        $('input.flat').iCheck({
            checkboxClass: 'icheckbox_flat-green',
            radioClass: 'iradio_flat-green'
        });

        initialCountries();
        initialCoins();

        var $form = $("#addClientForm");
        $.validator.unobtrusive.parse($form);

        $('#btnAddClient').on("click", function (event) {
            if ($form.valid()) {
                var dto = {
                    FullName: $('#a-client-fullName').val(),
                    Address: $('#a-client-address').val(),
                    ClientPhones: getPhonesValues(),
                    ClientCashes: getCoins(),
                    IsEnabled: getIsEnableValue(),
                    CountryId: getSelectedCountry()
                };

                $.ajax({
                    url: '@Url.Action("Create", "Client")',
                    type: 'POST',
                    data: dto,
                    dataType: "json",
                    cache: false,
                    success: function (data) {

                        if (data.Success == true) {
                            $('#createClientModal').modal('hide');
                            $('#createClientContainer').html('');

                            $clientDataTable.refresh();
                            toastr.success('تم الحفظ بنجاح')
                        }
                        else {
                            alert(data.Message);
                            toastr.error(data.Message);
                        }

                    },
                    error: function () { toastr.error("خدث خطأ ما أثناء الإضافة"); }
                });

            }


        });

        initNewPhoneEle();

        $('#addPhoneTextBtn').click(function () {
            addPhoneTextELement();
        });

    });

    //===Initial Functions===//
    
    function initNewPhoneEle() {
        $('.a-phone-group').append(getHtml());
    }

    function addPhoneTextELement() {

        var isEmpty = false;
        $('.a-phone-group :input.a-phone-input').each(function (data) {

            var value = $(this).val();
            if (value.trim() == "") {
                isEmpty = true;
                return;
            }
        });

        if (!isEmpty) {
            $('.a-phone-group').append(getHtml());

            //remove copy value from new textbox
            $('.a-phone-group :input.a-phone-input').last().val("")
        }

    }

    function initialCountries() {
         $.get('@Url.Action("GetAllWithProvinces", "Country")', function (data) {

             var countries = data.Countries;

             var option = '<option index="0"></option>';
             $('#a-client-countryId').append(option);

            for (var i = 0; i < countries.length; i++) {
                var option = '<option value="' + countries[i].Id + '">' + countries[i].Name + '</option>';
                $('#a-client-countryId').append(option);
            }

             $('#a-client-countryId').select2({ width: null, placeholder: "اختر منطقة" });

             //$("#a-client-countryId").select2("val", "");
             $('#a-client-countryId').val('').trigger('change')

        });
    }

    function initialCoins() {
        $.get('@Url.Action("GetCoinsForDropdown","Coin")', { term: "" }, function (data) {

            var coins = data.Coins;
            for (var i = 0; i < coins.length; i++) {
                var ele = '<div class="form-group">' +
                    '<label class="control-label col-md-3 col-sm-3">' + coins[i].Name + ':</label>' +
                    '<div class="col-md-8 col-sm-8">' +
                    '<div class="input-group">' +
                    '<input  type="number" data-coin-id="' + coins[i].Id+'" class="form-control a-coins-inputs" value="0" />' +
                    '<span class="input-group-addon">' + coins[i].Code + '</span>' +

                    '</div>' +
                    '</div>' +
                    '</div>';

                $('.a-coins').append(ele);
            }
            
        });
    }

    //===Get Functions===//

    function getPhonesValues() {
        var phones = [];
        
        $('.a-phone-group :input.a-phone-input').each(function (data) {

            var value = $(this).val();
            if (value.trim() != "" && value != null) {

                phones.push({ 'Phone': value.trim(), 'IsEnabled': true });
            }
        });

        return phones;
    }

    function getHtml() {
        return '<div class="col-md-8 col-sm-8 a-phone" style="margin-bottom:5px;">' +
            '<div class="input-group">' +
            '<input type="text" date-phone-id="0" placeholder="ادخل رقم الهاتف" class="form-control has-error a-phone-input" value="" />' +
            '<span class="input-group-addon" onclick="this.parentElement.parentElement.remove();"><span class="fa fa-close"></span></span>' +
            '</div > ' +
            '</div >';
    }

    function getIsEnableValue() {
        var divChecked = $('#IsEnabled').parent();
        if (divChecked.hasClass('checked'))
            return true;
        else
            return false;
    }

    function getSelectedCountry() {
        
        var data = $('#a-client-countryId').select2('data');
        return data[0].id;
    }

    function getCoins() {
       
        var companyCoins = [];
        var coinInputs = $('.a-coins-inputs');
        for (var i = 0; i < coinInputs.length; i++) {
            var id = $(coinInputs[i]).attr('data-coin-id');
            var value = $(coinInputs[i]).val();

            companyCoins.push({ 'InitialBalance': value, 'Total': value, 'CoinId': id });
        }

        return companyCoins;
    }

    //===Other Functions===//

    function resetAddClientContainer() {

        $('#createClientModal').modal('hide');
        $('#createClientContainer').html('');
    }

</script>