
@model BWR.Application.Dtos.Company.CompanyUpdateDto
@{
    /**/

    Layout = null;
}

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title">إضافة شركة</h4>
        </div>
        @using (Ajax.BeginForm("Edit", "Company", null, new AjaxOptions { HttpMethod = "Post" }, new { @class = "form-horizontal", role = "form", id = "editCompanyForm" }))
        {
            <div class="modal-body ">
                <div class="col-lg-12 col-md-12">
                    <ul class="nav nav-tabs" id="myTab" role="tablist">
                        <li class="nav-item active">
                            <a class="nav-link active" id="company-tab" data-toggle="tab" href="#editCompanySection" role="tab">بيانات الشركة</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="provinces-tab" data-toggle="tab" href="#editCoinSection" role="tab">إضافة رصيد</a>
                        </li>
                    </ul>
                </div>

                <div class="col-lg-12 col-md-12">
                    <div class="tab-content">
                        <div class="tab-pane active" id="editCompanySection">
                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                <div class="form-group">
                                    <label class="control-label col-md-3" for="Name">اسم الشركة <span class="text-danger">*</span></label>
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", id = "e-company-name" } })

                                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-3" for="CompanyCountries">اختر المناطق<span class="text-danger">*</span></label>
                                    <div class="col-md-9">
                                        @*<select id="e-countries-select" name="CompanyCountries" class="form-control" multiple="multiple"></select>*@
                                        @Html.ListBoxFor(model => model.CompanyCountries, new List<SelectListItem>(), new { @class = "form-control", id = "e-countries-select" })
                                        <span class="text-danger field-validation-error" data-valmsg-for="CompanyCountries" data-valmsg-replace="true"></span>
                                    </div>

                                </div>

                            </div>
                        </div>


                        <div class="tab-pane" id="editCoinSection">

                            <div class="row e-coins">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">

                        <button id="btnAddCompany" type="button" class="btn btn-primary">حفظ <span class="glyphicon glyphicon-save"></span></button>
                        <button type="button" class="btn btn-sm btn-default" onclick="resetEditCompanyContainer()" data-dismiss="modal">إغلاق <span class="glyphicon glyphicon-remove"></span></button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    var companyId;
    var selectedCoin;
    var selectedCountries;
    $(function () {

        companyId = '@Html.Raw(Model.Id)';
        selectedCoin =@Html.Raw(Json.Encode(Model.CompanyCashes));
        selectedCountries =@Html.Raw(Json.Encode(Model.CompanyCountries));

        initialCountries();
        initialCoins();

       

        var $form = $("#editCompanyForm");
        $.validator.unobtrusive.parse($form);

        $('#btnAddCompany').on("click", function (event) {
            if ($form.valid()) {

                var dto = {
                    Id: companyId,
                    Name: $('#e-company-name').val(),
                    CompanyCountries: getSelectedCountries(),
                    CompanyCashes: getCoins()
                };

                $.ajax({
                    url: '@Url.Action("Edit", "Company")',
                    type: 'POST',
                    data: dto,
                    dataType: "json",
                    cache: false,
                    success: function (data) {

                        if (data.Success == true) {
                            resetEditCompanyContainer();

                            $companyDataTable.refresh();
                            toastr.success('تم الحفظ بنجاح')
                        }
                        else {
                            if (data.Exist == true) {
                                $('[data-valmsg-for="Name"]').html("");
                                $('[data-valmsg-for="Name"]').html(data.Message);
                            }
                            toastr.error(data.Message);
                        }

                    },
                    error: function () { toastr.error("خدث خطأ ما أثناء الإضافة"); }
                });

            }


        });

    });

    function getSelectedCountries() {
        
        var countries = [];
        var data = $('#e-countries-select').select2('data');

        for (var i = 0; i < data.length; i++) {
            var countryId = data[i].id;
            var id = null;
            
            for (var j = 0; j < selectedCountries.length; j++) {
                if (selectedCountries[j].CountryId == countryId)
                    id = selectedCountries[j].Id;
            }
            countries.push({ 'Id': id, 'CountryId': countryId, 'CompanyId': companyId });
        }

        return countries;
    }

    function getCoins() {
       
        var companyCoins = [];
        var coinInputs = $('.e-coins-inputs');
        for (var i = 0; i < coinInputs.length ; i++) {
            var coinId = $(coinInputs[i]).attr('data-coin-id');
            var id = $(coinInputs[i]).attr('data-comp-coin-id');
            var value = $(coinInputs[i]).val();

            var isCheck = getCheckBoxValue(coinId);
            if (!isCheck)
                value = -value;

            companyCoins.push({ 'Id': id, 'InitialBalance': value, 'Total': value, 'CoinId': coinId, 'CompanyId': companyId });
        }

        return companyCoins;
    }

    function initialCountries() {
         $.get('@Url.Action("GetAllWithProvinces", "Country")', function (data) {

            var countries = data.Countries;
            for (var i = 0; i < countries.length; i++) {
                var option = '<option value="' + countries[i].Id + '">' + countries[i].Name + '</option>';
                $('#e-countries-select').append(option);
            }

        var countrySelect = $('#e-countries-select').select2({ width: null });
        
        var selectedCountriesIds = [];
        for (var i = 0; i < selectedCountries.length; i++) {
            selectedCountriesIds.push(selectedCountries[i].CountryId);
        }

        countrySelect.val(selectedCountriesIds).trigger('change');
        });
    }

    @*function initialCoins() {
        $.get('@Url.Action("GetCoinsForDropdown","Coin")', { term: "" }, function (data) {

            var coins = data.Coins;
            var selectedCoin =@Html.Raw(Json.Encode(Model.CompanyCashes));

            for (var i = 0; i < coins.length; i++) {
                var ele = '<div class="form-group">' +
                    '<label class="control-label col-md-3 col-sm-3">' + coins[i].Name + ':</label>' +
                    '<div class="col-md-8 col-sm-8">' +
                    '<div class="input-group">';

                for (var j = 0; j < selectedCoin.length; j++) {
                    if (selectedCoin[j].CoinId == coins[i].Id) {
                        ele += '<input  type="number" data-coin-id="' + coins[i].Id + '"data-comp-coin-id="' + selectedCoin[j].Id + '" class="form-control e-coins-inputs" value="' + selectedCoin[j].InitialBalance + '" />';
                    }
                }
                ele +='<span class="input-group-addon">' + coins[i].Code + '</span>' +
                    '</div>' +
                    '</div>' +
                    '</div>';

                $('.e-coins').append(ele);
            }
        });
    }*@

    function initialCoins() {
        $.get('@Url.Action("GetCoinsForDropdown","Coin")', { term: "" }, function (data) {

            var coins = data.Coins;
            var selectedCoins =@Html.Raw(Json.Encode(Model.CompanyCashes));

            for (var i = 0; i < coins.length; i++) {

                var ele = getCoinHtml(coins[i].Name, coins[i].Code, coins[i].Id);
                $('.e-coins').append(ele);

                var inputEle = $('.e-coins :input.e-coins-inputs').last();
                var checkBoxEle = $('.e-coins :input.e-coins-checkbox').last();
                
                inputEle.attr('data-coin-id', coins[i].Id);
                checkBoxEle.attr('data-coin-id', coins[i].Id);
                
                var selectedCoin = selectedCoins[i];
                if (selectedCoin != null) {
                    var clientCoinId = selectedCoin.Id;
                    var initialBalance = selectedCoin.InitialBalance;
                    
                    initialCheckBoxValue(coins[i].Id, initialBalance);

                    inputEle.val(Math.abs(initialBalance));
                    inputEle.attr('data-comp-coin-id', clientCoinId);
                }
            }

            $('.e-coins :input.e-coins-checkbox').iCheck({
                checkboxClass: 'icheckbox_flat-green',
                radioClass: 'iradio_flat-green'
            });

        });
    }

    function getCoinHtml(coinName, coinCode,coinId) {
        var ele = '<div class="row">' +
            '<div class="col-md-9 col-sm-9">'+
            '<div class="form-group">' +
            '<label class="control-label col-md-3 col-sm-3">' + coinName + ':</label>' +
            '<div class="col-md-9 col-sm-9">' +
            '<div class="input-group">';

        ele += '<input  type="number" data-coin-id="0" data-comp-coin-id="0" class="form-control e-coins-inputs" value="0" />';
        ele += '<span class="input-group-addon">' + coinCode + '</span>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '<div class="col-md-3 col-sm-3">' +
            '<div class="form-group">' +
            '<label class="control-label col-md-2 col-sm-2" for="Name">له: </label>' +
            '<div class="col-md-5 col-sm-5">' +
            '   <div class="checkbox">' +

            '         	<input type="checkbox" id="check-' + coinId + '" class="flat e-coins-checkbox" />' +
            
            
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';

        return ele;
    }


    function resetEditCompanyContainer() {

        $('#editCompanyModal').modal('hide');
        $('#editCompanyContainer').html('');
    }

    function getCheckBoxValue(coinId) {
        
        var selector = 'input#check-' + coinId;
        var checkBox = $('.e-coins').find(selector);
        if (checkBox != null) {
            var divChecked = checkBox.parent();
            if (divChecked.hasClass('checked'))
                return true;
        }
        
        return false;
    }

    function initialCheckBoxValue(coinId,value) {
        debugger;
        var selector = '#check-' + coinId;
        var checkBox = $('.e-coins').find(selector);
        if (checkBox != null) {
            var divChecked = checkBox.parent();
            if (value > 0) {
                $(selector).iCheck('check');
            }
                
        }
    }

</script>