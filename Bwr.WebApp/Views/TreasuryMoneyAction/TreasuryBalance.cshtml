@model BWR.Application.Dtos.Treasury.TreasuryMoneyAction.TreasuryMoneyActionInsertDto

@{

    Layout = "";
}

<!--added margin-bottom-->
<div class="portlet-title" style="margin-bottom: 4px;">

</div>

<div class="portlet box green">
    <div class="portlet-title">
        <div class="caption">
           
        </div>
        <div class="tools"> </div>
    </div>
    <div class="portlet-body">
        @using (Ajax.BeginForm("Create", "TreasuryMoneyAction", null, new AjaxOptions { HttpMethod = "Post" }, new { @class = "form-horizontal", role = "form", id = "addTreasuryMoneyActionForm" }))
        {
            <div class="row">
                <div class="col-lg-2 col-md-2">
                    <label>اختر العملة  <span class="text-danger">*</span></label>
                    @Html.DropDownListFor(model => model.CoinId, new List<SelectListItem>(), new { @class = "form-control", id = "a-coinId" })
                </div>
                <div class="col-lg-2 col-md-2">
                    <label>من تاريخ  <span class="text-danger">*</span></label>

                    @Html.EditorFor(model => model.From, new { htmlAttributes = new { @class = "form-control", type = "date", onchange = "search();", id = "a-from" } })

                    @Html.ValidationMessageFor(model => model.From, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-2 col-md-2">
                    <label>إلى تاريخ  <span class="text-danger">*</span></label>
                    @Html.EditorFor(model => model.To, new { htmlAttributes = new { @class = "form-control", type = "date", onchange= "search();", id = "a-to" } })

                    @Html.ValidationMessageFor(model => model.To, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-2 col-md-2">
                    <label  for="ActionType">النوع <span class="text-danger">*</span></label>
                    @Html.DropDownList("ActionType", new List<SelectListItem>(), new { @class = "form-control", id = "a-actionType" })

                    @Html.ValidationMessage("ActionType", "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-2 col-md-2">
                    <label>المبلغ  <span class="text-danger">*</span></label>
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", type = "number", id = "a-amount" } })

                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })

                </div>
                <div class="col-lg-2 col-md-2">
                    <div style="margin-top:25px"></div>
                    <button type="button" class="btn btn-primary" id="moenyActionBtn"><span class="fa fa-save"></span>  حفظ</button>
                </div>
            </div>
        }

        <br />
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <table class="table table-striped table-bordered table-hover dt-responsive"
                       id="treasuryMoneyActionDataTable"></table>
            </div>
            
        </div>

    </div>
</div>



<script type="text/javascript">
    var $treasuryMoneyActionDataTable;
    var $treasuryId = '@Model.TreasuryId';
    var $input;
    $(function () {
       
        initialTreasuryMoneyActionDataTable();
        initialCoinsDropdown();
        initialActionTypes();

        var $form = $("#addTreasuryMoneyActionForm");
        $.validator.unobtrusive.parse($form);

        $('#moenyActionBtn').on('click', function () {

            if ($form.valid()) {
                var dto = {
                    From: $('#a-from').val(),
                    To: $('#a-to').val(),
                    Amount: $('#a-amount').val(),
                    CoinId: getSelectedCoin(),
                    ActionType: getSelectedActionType(),
                    TreasuryId: '@Model.TreasuryId'
                };

                $.ajax({
                    'url': '@Url.Action("Create", "TreasuryMoneyAction")',
                    'type': 'POST',
                    'data': { 'dto': dto},
                    dataType: "json",
                    cache: false,
                    success: function (data) {

                       if (data.Success == true) {
                           $treasuryId = data.TreasuryId;
                           $treasuryMoneyActionDataTable.refresh();

                           resetTreasuryMoneyActionForm();
                           toastr.success('تم الحفظ بنجاح');
                       }
                       else {

                            toastr.error(data.Message);
                       }

                    },
                    error: function () { toastr.error("خدث خطأ ما أثناء الإضافة"); }
                });

            }
        });

        $('#a-coinId').on("change", function (e) {
            search();
           
        });

    });


    function resetTreasuryMoneyActionForm() {
        //$('#a-from').val("");
        //$('#a-to').val("");
        $('#a-amount').val("");
        //$('#a-coinId').val('').trigger('change');
        $('#a-actionType').val('').trigger('change');

    }

    function search() {
        initInputDate();
        $treasuryMoneyActionDataTable.refresh();
    }

    function initInputDate() {

        $input = {
            'From': $('#a-from').val(),
            'To': $('#a-to').val(),
            'CoinId': getSelectedCoin(),
            'TreasuryId': '@Model.TreasuryId'
        };
        
    }

    function initialTreasuryMoneyActionDataTable() {

        $input = {
            'From': '',
            'To': '',
            'CoinId': 0,
            'TreasuryId': '@Model.TreasuryId'
        };
        $treasuryMoneyActionDataTable = {
                    dt: null,
                    init: function () {
                        dt = $('#treasuryMoneyActionDataTable').DataTable({
                            'language': dataTableLocalizationArValue(),
                            'ajax': {
                                'url': '@Url.Action("Get","TreasuryMoneyAction")',
                                'method': 'POST',
                                'cash': false,
                                'data': function (d) {
                                    d.input = $input;
                                },
                            },
                            'columns': [
                                { 'title': 'الرصيد', 'data': 'Total',  'searchable': true },

                                {'title': 'له','data': "Amount",'searchable': true,
                                    render: function (data, type, row) {
                                        if (data > 0) {
                                            return data;
                                        } else {
                                            return '';
                                        }
                                    },
                                },
                                {'title': 'عليه','data': "Amount",'searchable': true,
                                    render: function (data, type, row) {
                                        if (data < 0) {
                                            return data * -1;
                                        } else {
                                            return '';
                                        }
                                    },
                                },
                                { 'title': 'التاريخ', 'data': 'Created',  'searchable': true }

                            ],
                            'lengthMenu': [10, 25, 50, 100],
                        });
                    },

                refresh: function () {

                    dt.ajax.reload();
                    }
                }

            $treasuryMoneyActionDataTable.init();
    }

    function initialCoinsDropdown() {
         $.get('@Url.Action("GetCoinsForDropdown","Coin")', { term: "" }, function (data) {

            var coins = data.Coins;
            var option = '<option index="0"></option>';
            $('#a-coinId').append(option);

            for (var i = 0; i < coins.length; i++) {
                var option = '<option value="' + coins[i].Id + '">' + coins[i].Name + '</option>';
                $('#a-coinId').append(option);
            }

            $('#a-coinId').select2({ width: null, placeholder: "اختر عملة" });

            $('#a-coinId').val('').trigger('change')
        });
    }

    function initialActionTypes() {
        
        $('#a-actionType').append('<option index="0"></option>');
        $('#a-actionType').append('<option value="1">أخذ</option>');
        $('#a-actionType').append('<option value="2">إعطاء</option>');

        $('#a-actionType').select2({ width: null, placeholder: "اختر نوع الحركة" });

    }

    function getSelectedCoin() {

        var data = $('#a-coinId').select2('data');
        return data[0].id;
    }

    function getSelectedActionType() {
        var data = $('#a-actionType').select2('data');
        return data[0].id;
    }

</script>





